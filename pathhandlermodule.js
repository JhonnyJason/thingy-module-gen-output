// Generated by CoffeeScript 2.6.1
//#############################################################################
//region debug
var checkDirectoryExists, checkProvidedPath, findModulePath, findSourcePath, log, modulePath, olog, sourcePath, thingyPath;

import {
  createLogFunctions
} from "thingy-debug";

({log, olog} = createLogFunctions("pathhandlermodule"));

import c from 'chalk';

import fs from "fs-extra";

import pathModule from "path";

//endregion

//#############################################################################
//region variables
sourcePath = "";

modulePath = "";

thingyPath = "";

//endregion

//#############################################################################
//region internal functions
checkDirectoryExists = async function(path) {
  var err, stats;
  try {
    stats = (await fs.lstat(path));
    return stats.isDirectory();
  } catch (error) {
    err = error;
    // console.log(c.red(err.message))
    return false;
  }
};

//#############################################################################
findSourcePath = async function() {
  var exists;
  log("findSourcePath");
  sourcePath = pathModule.resolve(thingyPath, "sources/source");
  exists = (await checkDirectoryExists(sourcePath));
  if (!exists) {
    throw new Error("sourcePath: " + sourcePath + " did not exist! The provided path might not be the thingy root.");
  }
  return sourcePath = sourcePath;
};

findModulePath = async function(name) {
  var exists;
  log("findModulePath");
  modulePath = pathModule.resolve(sourcePath, name);
  exists = (await checkDirectoryExists(modulePath));
  if (exists) {
    throw new Error("modulePath: " + modulePath + " did already exist!");
  }
  return modulePath = modulePath;
};

//#############################################################################
checkProvidedPath = async function(providedPath) {
  var exists;
  log("checkProvidedPath");
  if (providedPath) {
    if (!pathModule.isAbsolute(providedPath)) {
      providedPath = pathModule.resolve(process.cwd(), providedPath);
    }
  } else {
    providedPath = process.cwd();
  }
  exists = (await checkDirectoryExists(providedPath));
  if (!exists) {
    throw new Error("Provided path:'" + providedPath + "' does not exist!");
  }
  return thingyPath = providedPath;
};

//endregion

//#############################################################################
//region exports
export var checkPaths = async function(name, providedPath) {
  log("checkPaths");
  log("checking for providedPath: " + providedPath);
  await checkProvidedPath(providedPath);
  log("resulting thingy path is: " + thingyPath);
  await findSourcePath();
  return (await findModulePath(name));
};

export var getModulePath = function() {
  return modulePath;
};

export var getSourcePath = function() {
  return sourcePath;
};

//endregion
