// Generated by CoffeeScript 2.6.1
//#############################################################################
//region debug
var CoffeeGenTask, PugGenTask, StyleGenTask, Task, generateModuleDirectory, generateTasks, getPugName, log, olog;

import {
  createLogFunctions
} from "thingy-debug";

({log, olog} = createLogFunctions("modulegenmodule"));

import fs from "fs-extra";

import M from "mustache";

import pathModule from "path";

import * as pathHandler from "./pathhandlermodule.js";

//endregion

  //#############################################################################
//region classes
Task = class Task {
  constructor(moduleName) {
    this.moduleName = moduleName;
    return;
  }

  do() {}

};

CoffeeGenTask = (function() {
  var templatePath;

  class CoffeeGenTask extends Task {
    async do() {
      var fileContent, fileName, filePath, template;
      log("do CoffeeGenTask for module " + this.moduleName);
      fileName = this.moduleName + ".coffee";
      filePath = pathModule.resolve(pathHandler.modulePath, fileName);
      // log "filePath: " + filePath
      template = (await fs.readFile(templatePath, "utf-8"));
      fileContent = M.render(template, {
        moduleName: this.moduleName
      });
      
      // log "\n - - - \nfileContent:\n" + fileContent
      return (await fs.writeFile(filePath, fileContent));
    }

  };

  templatePath = pathModule.resolve(__dirname, "file-templates/coffee.M");

  return CoffeeGenTask;

}).call(this);

PugGenTask = (function() {
  var templatePath;

  class PugGenTask extends Task {
    async do() {
      var fileContent, fileName, filePath, pugname, template;
      log("do PugGenTask for module " + this.moduleName);
      pugname = getPugName(this.moduleName);
      // log "pugname: " + pugname
      fileName = pugname + ".pug";
      filePath = pathModule.resolve(pathHandler.modulePath, fileName);
      // log "filePath: " + filePath
      template = (await fs.readFile(templatePath, "utf-8"));
      fileContent = M.render(template, {
        moduleName: pugname
      });
      // log "\n - - - \nfileContent:\n" + fileContent
      return (await fs.writeFile(filePath, fileContent));
    }

  };

  templatePath = pathModule.resolve(__dirname, "file-templates/pug.M");

  return PugGenTask;

}).call(this);

StyleGenTask = (function() {
  var templatePath;

  class StyleGenTask extends Task {
    async do() {
      var fileContent, fileName, filePath, pugname, template;
      log("do StyleGenTask for module " + this.moduleName);
      fileName = "styles.styl";
      pugname = getPugName(this.moduleName);
      // log "pugname: " + pugname
      filePath = pathModule.resolve(pathHandler.modulePath, fileName);
      // log "filePath: " + filePath
      template = (await fs.readFile(templatePath, "utf-8"));
      fileContent = M.render(template, {
        moduleName: pugname
      });
      // log "\n - - - \nfileContent:\n" + fileContent
      return (await fs.writeFile(filePath, fileContent));
    }

  };

  templatePath = pathModule.resolve(__dirname, "file-templates/styl.M");

  return StyleGenTask;

}).call(this);


//endregion

//#############################################################################
//region internal functions
getPugName = function(name) {
  var dif, index;
  log("getPugName");
  index = name.lastIndexOf("module");
  dif = name.length - index;
  if (dif === 6) {
    return name.substring(0, index);
  }
  return name;
};

generateModuleDirectory = async function() {
  var dirPath, result;
  log("generateModuleDirectory");
  dirPath = pathHandler.modulePath;
  result = (await fs.mkdirs(dirPath));
  log(result);
};

generateTasks = function(files, name) {
  var file, i, len, tasks;
  log("generateTasks");
  tasks = [];
  for (i = 0, len = files.length; i < len; i++) {
    file = files[i];
    switch (file) {
      case ".coffee":
        tasks.push(new CoffeeGenTask(name));
        break;
      case ".pug":
        tasks.push(new PugGenTask(name));
        break;
      case "styles.styl":
        tasks.push(new StyleGenTask(name));
        break;
      default:
        throw "unknown option to generate Task for: " + file;
    }
  }
  return tasks;
};

//endregion

//#############################################################################
export var generate = async function(files, name) {
  var promises, task, tasks;
  log("generate");
  tasks = generateTasks(files, name);
  await generateModuleDirectory();
  promises = (function() {
    var i, len, results;
    results = [];
    for (i = 0, len = tasks.length; i < len; i++) {
      task = tasks[i];
      results.push(task.do());
    }
    return results;
  })();
  await Promise.all(promises);
};
